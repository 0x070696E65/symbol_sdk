using SymbolSdk;
using SymbolSdk.Symbol;
SymbolFacade Facade = new (Network.TestNet);
const string payload = "96000000000000005D3116D285D4ED8883DBBBC8E59FED08A888DAB21C6E4B918434BE2B3AF1105EE1B94EAA9C4BB54428F4A71C711964F00848B9A9E00D8F55670991AADC16119F70F08E77C31D9816C0A63009137A9BADBE5F42431EFBC3994822A25CED9D82820000000001984D41E0FEEEEFFEEEEFFEE0711EE7711EE7719AAEBB6AA74736151027000000000000000000000504";
var tx = new MosaicDefinitionTransactionV1(
	network: NetworkType.TESTNET,
	duration: new BlockDuration(10000),
	nonce: new MosaicNonce(0),
	flags: 
	new MosaicFlags((byte)new[] {
		MosaicFlags.RESTRICTABLE,
		MosaicFlags.SUPPLY_MUTABLE,
	}.ToList().Select(flag => (int)flag.Value).Sum())
	,
	divisibility: 4,
	signerPublicKey: new PublicKey("70F08E77C31D9816C0A63009137A9BADBE5F42431EFBC3994822A25CED9D8282"),
	signature: new Signature("5D3116D285D4ED8883DBBBC8E59FED08A888DAB21C6E4B918434BE2B3AF1105EE1B94EAA9C4BB54428F4A71C711964F00848B9A9E00D8F55670991AADC16119F"),
	fee: new Amount(18370164183782063840),
	deadline: new Timestamp(8207562320463688160),
	id: new MosaicId(IdGenerator.GenerateMosaicId(Facade.Network.PublicKeyToAddress("70F08E77C31D9816C0A63009137A9BADBE5F42431EFBC3994822A25CED9D8282"), 0))
);
Console.WriteLine(tx);
Console.WriteLine(Converter.BytesToHex(tx.Serialize()));
// 1027000000000000000000000504
// 1027000000000000
// 0000000000000000
// 05
